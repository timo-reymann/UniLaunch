using System.Text;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.CodeAnalysis.Text;

namespace UniLaunch.CodeGenerator;

[Generator]
public class ViewModelGenerator : ISourceGenerator
{
    public void Initialize(GeneratorInitializationContext context)
    {
        // No init required for this generator
    }

    public void Execute(GeneratorExecutionContext context)
    {
        var syntaxTrees = context.Compilation.SyntaxTrees;

        foreach (var syntaxTree in syntaxTrees)
        {
            var root = syntaxTree.GetRoot();
            var semanticModel = context.Compilation.GetSemanticModel(syntaxTree);

            foreach (var classDeclaration in root.DescendantNodes().OfType<ClassDeclarationSyntax>())
            {
                var classSymbol = semanticModel.GetDeclaredSymbol(classDeclaration);
                if (classSymbol == null || !ShouldGenerateViewModel(classSymbol))
                    continue;

                var code = GenerateViewModelCode(classSymbol);
                context.AddSource($"{classSymbol.Name}ViewModel.Properties.g.cs", SourceText.From(code, Encoding.UTF8));
            }
        }
    }

    private static bool ShouldGenerateViewModel(ISymbol classSymbol) =>
        classSymbol.GetAttributes().Any(attr => attr.AttributeClass!.Name.EndsWith("GenerateViewModelAttribute"));

    private string GenerateViewModelCode(INamedTypeSymbol classSymbol)
    {
        var namespaceName = classSymbol.ContainingNamespace.ToDisplayString();
        var attributeArgs = classSymbol.GetAttributes()
            .First(attr => attr.AttributeClass!.Name.EndsWith("GenerateViewModelAttribute"))
            .ConstructorArguments;

        var modelType = attributeArgs[0]
            .Value as INamedTypeSymbol;
        
        var controlType = (attributeArgs[1]
                .Value as INamedTypeSymbol
            )?.ToString() ?? "void";

        var properties = modelType!.GetMembers()
            .OfType<IPropertySymbol>()
            .Select(GenerateProperty);
        var className = classSymbol.Name;
        var propertyDefinitions = string.Join("\n", properties);

        var code = $$"""
                     //----------------------
                     // <auto-generated>
                     //     Generated by UniLaunch.CodeGeneration.  DO NOT EDIT!
                     // </auto-generated>
                     //----------------------
                     using System;
                     using ReactiveUI;
                     using System.Collections.ObjectModel;
                     using {{modelType.ContainingNamespace.ToDisplayString()}};

                     namespace {{namespaceName}}
                     {
                         public partial class {{className}} : {{classSymbol.BaseType}}, UniLaunch.UI.CodeGeneration.IAssociatedUserControl
                         {
                             private {{modelType}} _model = null;
                     
                             {{propertyDefinitions}}
                             
                             public Type UserControl => typeof({{controlType}});
                     
                             /// <summary>
                             /// Create empty few model
                             /// </summary>
                             public {{className}}()
                             {
                             }
                             
                             /// <summary>
                             /// Create view model from model
                             /// </summary>
                             public {{className}}({{modelType}} model)
                             {
                                this._model = model;
                             }
                             
                             /// <summary>
                             /// Get the model from view model
                             /// </summary>
                             public {{modelType}} Model {
                                get => this._model;
                             }
                         }
                     }
                     """;

        return CSharpSyntaxTree.ParseText(code)
            .GetRoot()
            .NormalizeWhitespace()
            .GetText()
            .ToString();
    }

    private string GenerateProperty(IPropertySymbol propertySymbol)
    {
        var propertyName = propertySymbol.Name;
        var isList = propertySymbol.Type.Name == "List";

        return $$"""
                 /// <summary>
                 /// Property for ViewModel binding to {{propertyName}}
                 /// </summary>
                 public {{propertySymbol.Type.ToDisplayString()}} {{propertyName}}Property
                         {
                         // {{isList}}
                             set {
                                var propVal = _model.{{propertyName}};
                                this.RaiseAndSetIfChanged(ref propVal, value);
                             }
                             get => _model.{{propertyName}};
                         }
                 """;
    }
}